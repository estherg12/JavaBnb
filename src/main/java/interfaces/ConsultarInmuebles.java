
package interfaces;

import java.awt.Font;
import java.awt.Frame;
import java.awt.HeadlessException;
import java.io.IOException;
import java.math.BigDecimal;
import java.math.RoundingMode;
import java.util.ArrayList;
import java.util.Date;
import java.util.ListIterator;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import poo.pl2.Anfitrion;
import poo.pl2.DatosInmueble;
import poo.pl2.Direccion;
import poo.pl2.Inmueble;
import poo.pl2.Particular;
import poo.pl2.Reserva;
import poo.pl2.ServiciosInmueble;
import poo.pl2.UtilInmuebles;
import poo.pl2.UtilReservas;
import poo.pl2.UtilUsuarios;

/**
 *
 * @author Esthe
 */
public class ConsultarInmuebles extends javax.swing.JDialog {

    private static final long serialVersionUID = 1L;

    Frame principal;
    private JLabel[] estrellas = new JLabel[5];
    /**
     * Creates new form ConsultarInmuebles
     */
    private ArrayList<Inmueble> inmueblesAux; //referencia al arrayList inmuebles de UtilInmuebles
    private ListIterator<Inmueble> listIter; //Iterador para recorrer el ArrayList en ambas direcciones
    private Inmueble objInm;
    private Date fechaSalida;
    private Date fechaEntrada;
    private Particular partic;
    private String calificacionTxt;
    private double calificacion;
    
    /**
     *Con este constructor entra el anfitrion a ver la consulta de sus inmuebles
     * @param parent
     * @param modal
     * @param anfit
     */
    public ConsultarInmuebles(java.awt.Frame parent, boolean modal, Anfitrion anfit){
        //entrada del anfitrion
        super(parent,modal);
        initComponents();
        
        inmueblesAux = UtilInmuebles.inmueblesAnfit(anfit);//arrayList inmuebles
        
        activaFieldDatos();
        buttonGuardar.setVisible(true);
        buttonBaja.setVisible(true);
        buttonReservas.setVisible(true);
        buttonReservar.setVisible(false);
        consultarTodo();
        
        if(!inmueblesAux.isEmpty()){//se muestra cuando el anfitrion tenga al menos 1 inmueble
            this.setVisible(true);
        }
    }
    
    /**
     *constructor con el que entra un particular al hacer la búsqueda de inmuebles
     * @param parent
     * @param modal
     * @param inmuebles
     * @param fechaEntrada
     * @param fechaSalida
     * @param criterio
     * @param tipo
     */
    public ConsultarInmuebles(java.awt.Frame parent, boolean modal, ArrayList<Inmueble> inmuebles, Date fechaEntrada, Date fechaSalida, String criterio, String tipo) {
        //entrada de particular
        super(parent, modal);
        initComponents();
        
        //asignar el arraylist de inmuebles disponibles ordenados según la preferencia
        if(criterio.equals("Precio")){//por precio
            this.inmueblesAux = UtilInmuebles.getInmueblesXprecioFiltrados(inmuebles);
        }else if(criterio.equals("Tipo")){//por tipo
            this.inmueblesAux = UtilInmuebles.getInmueblesTipo(tipo, inmuebles);
        }else if(criterio.equals("Calificacion")){//por relevancia
            this.inmueblesAux = UtilInmuebles.getInmueblesCalificacion(inmuebles);
        }
        
        this.fechaEntrada = fechaEntrada;
        this.fechaSalida = fechaSalida;
        
        this.partic = UtilUsuarios.getPartic();
        
        desactivaFieldDatos();
        
        buttonGuardar.setVisible(false);
        buttonBaja.setVisible(false);
        buttonReservas.setVisible(false);
        buttonReservar.setVisible(true);
        
        consultarTodo();
        this.setVisible(true);
    }
    
    /**
     *constructor con el que entra cualquier usuario (administrador solo puede entrar de esta forma)
     * desde el listado de inmuebles
     * @param parent
     * @param modal
     * @param inmueble
     */
    public ConsultarInmuebles(java.awt.Frame parent, boolean modal, Inmueble inmueble){
        //entrada del listado de Inmuebles
        super(parent, modal);
        initComponents();
        presenta(inmueble);
        
        desactivaFieldDatos();
        
        objInm = inmueble; //para que cuando se abra la consulta de inmuebles por listado objInm no sea nulo
        
        buttonSiguiente.setVisible(false);
        buttonAnterior.setVisible(false);
        buttonGuardar.setVisible(false);
        buttonBaja.setVisible(false);
        buttonReservas.setVisible(false);
        buttonReservar.setVisible(false);
        
        this.setVisible(true);
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonSiguiente = new javax.swing.JButton();
        buttonAnterior = new javax.swing.JButton();
        buttonGuardar = new javax.swing.JButton();
        buttonBaja = new javax.swing.JButton();
        buttonReservas = new javax.swing.JButton();
        vistaInm = new javax.swing.JPanel();
        fieldHuesped = new javax.swing.JTextField();
        cCocina = new javax.swing.JCheckBox();
        cTrabajo = new javax.swing.JCheckBox();
        cSecadora = new javax.swing.JCheckBox();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        cWifi = new javax.swing.JCheckBox();
        cPiscina = new javax.swing.JCheckBox();
        cLavadora = new javax.swing.JCheckBox();
        cAparcamiento = new javax.swing.JCheckBox();
        cAire = new javax.swing.JCheckBox();
        fieldHabit = new javax.swing.JTextField();
        fieldNombre = new javax.swing.JTextField();
        fieldCama = new javax.swing.JTextField();
        fieldCiudad = new javax.swing.JTextField();
        labelImagen = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        fieldCP = new javax.swing.JTextField();
        fieldBaños = new javax.swing.JTextField();
        fieldCalle = new javax.swing.JTextField();
        fieldTipo = new javax.swing.JTextField();
        jLabel21 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        fieldNumero = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        fieldPrecio = new javax.swing.JFormattedTextField();
        jLabel23 = new javax.swing.JLabel();
        panelEstrellas = new javax.swing.JPanel();
        labelCalificacion = new javax.swing.JLabel();
        buttonReservar = new javax.swing.JButton();
        buttonComentarios = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        buttonSiguiente.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        buttonSiguiente.setForeground(new java.awt.Color(62, 123, 221));
        buttonSiguiente.setIcon(new javax.swing.ImageIcon("C:\\Users\\Esthe\\OneDrive - Universidad de Alcala\\GISI\\1curso\\Programación\\PL2\\imagenes\\siguiente.png")); // NOI18N
        buttonSiguiente.setText("Siguiente");
        buttonSiguiente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonSiguienteActionPerformed(evt);
            }
        });

        buttonAnterior.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        buttonAnterior.setForeground(new java.awt.Color(62, 123, 221));
        buttonAnterior.setIcon(new javax.swing.ImageIcon("C:\\Users\\Esthe\\OneDrive - Universidad de Alcala\\GISI\\1curso\\Programación\\PL2\\imagenes\\anterior.png")); // NOI18N
        buttonAnterior.setText("Anterior");
        buttonAnterior.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAnteriorActionPerformed(evt);
            }
        });

        buttonGuardar.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        buttonGuardar.setText("Guardar");
        buttonGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonGuardarActionPerformed(evt);
            }
        });

        buttonBaja.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        buttonBaja.setText("Baja");
        buttonBaja.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonBajaActionPerformed(evt);
            }
        });

        buttonReservas.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        buttonReservas.setText("Ver Reservas");
        buttonReservas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonReservasActionPerformed(evt);
            }
        });

        cCocina.setText("Cocina");

        cTrabajo.setText("Zona de Trabajo");

        cSecadora.setText("Secador");

        jLabel17.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel17.setIcon(new javax.swing.ImageIcon("C:\\Users\\Esthe\\OneDrive - Universidad de Alcala\\GISI\\1curso\\Programación\\PL2\\imagenes\\usuarioPequeño.png")); // NOI18N
        jLabel17.setToolTipText("HUESPEDES");

        jLabel18.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel18.setIcon(new javax.swing.ImageIcon("C:\\Users\\Esthe\\OneDrive - Universidad de Alcala\\GISI\\1curso\\Programación\\PL2\\imagenes\\habitacion.png")); // NOI18N
        jLabel18.setToolTipText("HABITACIONES");

        jLabel19.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel19.setIcon(new javax.swing.ImageIcon("C:\\Users\\Esthe\\OneDrive - Universidad de Alcala\\GISI\\1curso\\Programación\\PL2\\imagenes\\cama.png")); // NOI18N
        jLabel19.setToolTipText("CAMAS");

        cWifi.setText("Wifi");

        cPiscina.setText("Piscina");

        cLavadora.setText("Lavadora");

        cAparcamiento.setText("Aparcamiento");

        cAire.setText("Aire acondicionado");

        fieldNombre.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N

        labelImagen.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelImagen.setText("imagen");
        labelImagen.setToolTipText("Imagen");

        jLabel20.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel20.setIcon(new javax.swing.ImageIcon("C:\\Users\\Esthe\\OneDrive - Universidad de Alcala\\GISI\\1curso\\Programación\\PL2\\imagenes\\baño.png")); // NOI18N
        jLabel20.setToolTipText("BAÑOS");

        jLabel16.setFont(new java.awt.Font("Segoe UI", 3, 18)); // NOI18N
        jLabel16.setText("Servicios");

        jLabel21.setFont(new java.awt.Font("Segoe UI", 3, 18)); // NOI18N
        jLabel21.setText("Precio por noche");

        jLabel5.setFont(new java.awt.Font("Segoe UI", 3, 18)); // NOI18N
        jLabel5.setText("Ciudad");

        jLabel6.setFont(new java.awt.Font("Segoe UI", 3, 18)); // NOI18N
        jLabel6.setText("Código Postal");

        jLabel22.setFont(new java.awt.Font("Segoe UI", 3, 18)); // NOI18N
        jLabel22.setText("Tipo");

        jLabel7.setFont(new java.awt.Font("Segoe UI", 3, 18)); // NOI18N
        jLabel7.setText("Calle");

        jLabel8.setFont(new java.awt.Font("Segoe UI", 3, 18)); // NOI18N
        jLabel8.setText("Número");

        fieldPrecio.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#,##0.##"))));

        jLabel23.setFont(new java.awt.Font("Segoe UI", 3, 18)); // NOI18N
        jLabel23.setText("Calificación");

        labelCalificacion.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        labelCalificacion.setText("0");

        javax.swing.GroupLayout vistaInmLayout = new javax.swing.GroupLayout(vistaInm);
        vistaInm.setLayout(vistaInmLayout);
        vistaInmLayout.setHorizontalGroup(
            vistaInmLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(vistaInmLayout.createSequentialGroup()
                .addGroup(vistaInmLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(vistaInmLayout.createSequentialGroup()
                        .addGap(47, 47, 47)
                        .addGroup(vistaInmLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel16, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cAparcamiento)
                            .addComponent(cLavadora, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cCocina, javax.swing.GroupLayout.Alignment.LEADING))
                        .addGap(27, 27, 27)
                        .addGroup(vistaInmLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cPiscina)
                            .addComponent(cWifi)
                            .addComponent(cAire)
                            .addComponent(cTrabajo)
                            .addComponent(cSecadora)))
                    .addGroup(vistaInmLayout.createSequentialGroup()
                        .addGap(37, 37, 37)
                        .addComponent(labelImagen, javax.swing.GroupLayout.PREFERRED_SIZE, 355, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(65, 65, 65)
                .addGroup(vistaInmLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel17, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel18, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel19, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel20))
                .addGap(18, 18, 18)
                .addGroup(vistaInmLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(vistaInmLayout.createSequentialGroup()
                        .addGroup(vistaInmLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(fieldHabit)
                            .addComponent(fieldCama, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(47, 47, 47)
                        .addGroup(vistaInmLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel21)
                            .addComponent(jLabel22, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(vistaInmLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(fieldTipo, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 327, Short.MAX_VALUE)
                            .addComponent(fieldPrecio, javax.swing.GroupLayout.Alignment.LEADING)))
                    .addComponent(fieldNombre, javax.swing.GroupLayout.PREFERRED_SIZE, 599, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fieldHuesped, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(vistaInmLayout.createSequentialGroup()
                        .addGroup(vistaInmLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6)
                            .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(30, 30, 30)
                        .addGroup(vistaInmLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(fieldNumero, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(fieldCalle, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(fieldCP, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(fieldCiudad, javax.swing.GroupLayout.PREFERRED_SIZE, 296, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(vistaInmLayout.createSequentialGroup()
                        .addGroup(vistaInmLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(vistaInmLayout.createSequentialGroup()
                                .addComponent(fieldBaños, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, vistaInmLayout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addGroup(vistaInmLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(labelCalificacion, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel23, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(18, 18, 18)
                        .addComponent(panelEstrellas, javax.swing.GroupLayout.PREFERRED_SIZE, 319, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(25, 25, 25)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        vistaInmLayout.setVerticalGroup(
            vistaInmLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(vistaInmLayout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(labelImagen, javax.swing.GroupLayout.PREFERRED_SIZE, 237, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(vistaInmLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel16)
                    .addComponent(cWifi))
                .addGap(10, 10, 10)
                .addComponent(cPiscina)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(vistaInmLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cAparcamiento)
                    .addComponent(cAire))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(vistaInmLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cCocina)
                    .addComponent(cTrabajo)
                    .addComponent(jLabel23))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(vistaInmLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cLavadora)
                    .addComponent(cSecadora)
                    .addComponent(labelCalificacion))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(vistaInmLayout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addComponent(fieldNombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12)
                .addGroup(vistaInmLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(fieldCiudad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(vistaInmLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(fieldCP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(vistaInmLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(fieldCalle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(vistaInmLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel8)
                    .addComponent(fieldNumero, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(vistaInmLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(vistaInmLayout.createSequentialGroup()
                        .addComponent(fieldHuesped, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(vistaInmLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(vistaInmLayout.createSequentialGroup()
                                .addComponent(fieldHabit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(fieldCama, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(fieldBaños, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(vistaInmLayout.createSequentialGroup()
                                .addGroup(vistaInmLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel22)
                                    .addComponent(fieldTipo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(vistaInmLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel21)
                                    .addComponent(fieldPrecio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 31, Short.MAX_VALUE)
                                .addComponent(panelEstrellas, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(vistaInmLayout.createSequentialGroup()
                        .addComponent(jLabel17)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel18)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel19)
                        .addGap(7, 7, 7)
                        .addComponent(jLabel20)
                        .addGap(107, 107, 107)))
                .addGap(66, 66, 66))
        );

        buttonReservar.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        buttonReservar.setText("Reservar");
        buttonReservar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonReservarActionPerformed(evt);
            }
        });

        buttonComentarios.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        buttonComentarios.setText("Ver Comentarios");
        buttonComentarios.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonComentariosActionPerformed(evt);
            }
        });

        jLabel9.setIcon(new javax.swing.ImageIcon("C:\\Users\\Esthe\\OneDrive - Universidad de Alcala\\GISI\\1curso\\Programación\\PL2\\imagenes\\LogoPequeño.png")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(63, 63, 63)
                .addComponent(buttonAnterior, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(buttonSiguiente, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(53, 53, 53))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(82, 82, 82)
                        .addComponent(buttonGuardar)
                        .addGap(56, 56, 56)
                        .addComponent(buttonBaja)
                        .addGap(63, 63, 63)
                        .addComponent(buttonReservas)
                        .addGap(150, 150, 150)
                        .addComponent(buttonComentarios)
                        .addGap(189, 189, 189)
                        .addComponent(buttonReservar))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel9)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(30, Short.MAX_VALUE)
                .addComponent(vistaInm, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(25, 25, 25))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(2, 2, 2)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buttonSiguiente)
                    .addComponent(buttonAnterior))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 18, Short.MAX_VALUE)
                .addComponent(vistaInm, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(buttonReservar)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(buttonGuardar)
                        .addComponent(buttonBaja)
                        .addComponent(buttonReservas)
                        .addComponent(buttonComentarios)))
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    /** Consulta los inmuebles del ArrayList ordenadas para su presentación */
    private void consultarTodo() {
        try {
            //creamos el iterador sobre el ArrayList
            listIter = inmueblesAux.listIterator();

            buttonAnterior.setEnabled(true);
            buttonSiguiente.setEnabled(true);
             
            buttonBaja.setEnabled(true);
            buttonGuardar.setEnabled(true);
            buttonReservar.setEnabled(true);
            buttonReservas.setEnabled(true);
            
            //presentamos 
            if (listIter.hasNext()) {
                objInm = listIter.next();
            }
            if (objInm != null) {
                presenta(objInm);
            } else {
                JOptionPane.showMessageDialog(this, "No hay inmuebles.", "Mensaje", JOptionPane.INFORMATION_MESSAGE);
            }
        } catch (HeadlessException e) {
            JOptionPane.showMessageDialog(this, "Error: " + e.getMessage(), "Mensaje", JOptionPane.ERROR_MESSAGE);
            System.out.println("Error: " + e.toString());
        }
    }//fin consultarTodo

    /**
     * presenta un inmueble concreto en arg
     * @param inm 
     */
    private void consultarTodoInmueble(Inmueble inm) {
        try {
            //referenciamos al ArrayList de UtilInmuebles
            inmueblesAux = UtilInmuebles.getInmueblesXnombre();
            //creamos el iterador sobre el ArrayList
            listIter = inmueblesAux.listIterator();
            //presentamos el inmueble cuando lo encontremos
            while (listIter.hasNext()) {
                if (listIter.next().equals(inm)) {
                    presenta(inm);
                    break;
                }
            }            

        } catch (HeadlessException e) {
            JOptionPane.showMessageDialog(this, "Error: " + e.getMessage(), "Mensaje", JOptionPane.ERROR_MESSAGE);
            System.out.println("Error: " + e.toString());
        }
    }//fin consultarTodoInmueble
    
    
    /** Presenta los datos de un inmueble en el panel de datos */
    private void presenta(Inmueble inm) {
        String titulo = inm.getTitulo();
        String tipo = inm.getTipo();
        DatosInmueble datos = inm.getDatosInmueble();
        String huesped = datos.getHuespedes();
        String camas = datos.getCamas();
        String habit = datos.getHabitaciones();
        String baños = datos.getBaños();
        ServiciosInmueble servicios = inm.getServicios();
        boolean wifi = servicios.isWifi();
        boolean aire = servicios.isAireAcondicionado();
        boolean piscina = servicios.isPiscina();
        boolean trabajo = servicios.isZonaTrabajo();
        boolean aparcamiento = servicios.isAparcamiento();
        boolean lavadora = servicios.isLavadora();
        boolean secadora = servicios.isSecador();
        boolean cocina = servicios.isCocina();
        Direccion direccion = inm.getDireccion();
        String calle = direccion.getCalle();
        String numero = direccion.getNumero();
        String cp = direccion.getCodigoPostal();
        String ciudad = direccion.getCiudad();
        String precioXnoche = Double.toString(inm.getPrecioXnoche());
        
        panelEstrellas.removeAll();
        for(int i=0; i<estrellas.length; i++){
            estrellas[i] = new JLabel("\u2606");//estrella vacía
            estrellas[i].setFont(new Font("SansSerif",Font.PLAIN,30));
            final int index = i+1;
            panelEstrellas.add(estrellas[i]);
        }
        
        // Actualizar el diseño del panel
        panelEstrellas.revalidate();
        panelEstrellas.repaint();
        
        calificacion = UtilInmuebles.calcularCalificacionMedia(inm);
        int cRedond = (int) Math.round(calificacion);
        calificacionTxt = String.valueOf(calificacion);
        
        setEstrellasCalificacion(cRedond);
        setLabelCalificacion(calificacionTxt);
        
        String imagen = inm.getImagen();
        
        setFieldNombre(titulo);
        setFieldTipo(tipo);
        setFieldHuesped(huesped);
        setFieldCama(camas);
        setFieldHabit(habit);
        setFieldBaños(baños);
        setCWifi(wifi);
        setCAire(aire);
        setCPiscina(piscina);
        setCTrabajo(trabajo);
        setCAparcamiento(aparcamiento);
        setCLavadora(lavadora);
        setCSecadora(secadora);
        setCCocina(cocina);
        setFieldCalle(calle);
        setFieldNumero(numero);
        setFieldCP(cp);
        setFieldCiudad(ciudad);
        setFieldPrecio(precioXnoche);
        setLabelImagen(imagen);
    }
    
    private void buttonSiguienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSiguienteActionPerformed
        // TODO add your handling code here:
        if(listIter.hasNext()){
            objInm = listIter.next();
        }else{//reinicia al primer elemento
            while (listIter.hasPrevious()){
                listIter.previous();
            }
            if(listIter.hasNext()){
                objInm = listIter.next();
            }
        }
        
        if(objInm != null){
            presenta(objInm);
        }else {
                JOptionPane.showMessageDialog(this, "No hay inmuebles.", "Mensaje", JOptionPane.INFORMATION_MESSAGE);
            }
    }//GEN-LAST:event_buttonSiguienteActionPerformed

    private void buttonAnteriorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonAnteriorActionPerformed
        // TODO add your handling code here:
        if(listIter.hasPrevious()){
            objInm = listIter.previous();
        }else{//reinicia al primer elemento
            while(listIter.hasNext()){
                listIter.next();
            }
            if(listIter.hasPrevious()){
                objInm = listIter.previous();
            }
        }
        
        if(objInm != null){
            presenta(objInm);
        }else {
                JOptionPane.showMessageDialog(this, "No hay inmuebles.", "Mensaje", JOptionPane.INFORMATION_MESSAGE);
            }
    }//GEN-LAST:event_buttonAnteriorActionPerformed

    private void buttonGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonGuardarActionPerformed
        // TODO add your handling code here:
        try{
            String nombre = getFieldNombre();
            String tipo = getFieldTipo();
            String huesped = getFieldHuesped();
            String cama = getFieldCama();
            String habit = getFieldHabit();
            String baños = getFieldBaños();
            boolean wifi = getCWifi();
            boolean aire = getCAire();
            boolean piscina = getCPiscina();
            boolean trabajo = getCTrabajo();
            boolean aparcamiento = getCAparcamiento();
            boolean lavadora =getCLavadora();
            boolean secador = getCSecadora();
            boolean cocina = getCCocina();
            String calle = getFieldCalle();
            String numero =getFieldNumero();
            String cp = getFieldCP();
            String ciudad = getFieldCiudad();
            double precioXnoche = Double.parseDouble(getFieldPrecio());
            String imagen = getLabelImagen();
            

            Direccion direccion = new Direccion(calle, numero, cp, ciudad);
            DatosInmueble datos = new DatosInmueble(huesped, habit, cama, baños);
            ServiciosInmueble servicios = new ServiciosInmueble(wifi, cocina, aire, trabajo, aparcamiento, piscina, lavadora, secador);

            Anfitrion anfit = UtilUsuarios.getAnfit();
            Inmueble inm = objInm;
            if(UtilInmuebles.modificarDatosInmueble(inm, nombre, direccion, datos, tipo, servicios, imagen, precioXnoche, anfit)){
                JOptionPane.showMessageDialog(buttonGuardar, "Datos del Inmueble guardados.", "Mensaje", JOptionPane.INFORMATION_MESSAGE);
                
                
            }
            else {
                JOptionPane.showMessageDialog(buttonGuardar, "Error al guardar el inmueble.", "Mensaje", JOptionPane.ERROR_MESSAGE);
            }
        }catch (HeadlessException exc) {
            JOptionPane.showMessageDialog(buttonGuardar, "Excepción al guardar el inmueble.", "Mensaje", JOptionPane.ERROR_MESSAGE);
            System.out.println("Error: " + exc.toString());
        }catch (NullPointerException exc) {
            JOptionPane.showMessageDialog(buttonGuardar, "Excepción al guardar el inmueble: Alguno de los campos es nulo.", "Mensaje", JOptionPane.ERROR_MESSAGE);
            System.out.println("Error: " + exc.toString());
        }
        
    }//GEN-LAST:event_buttonGuardarActionPerformed

    private void buttonBajaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonBajaActionPerformed
        // TODO add your handling code here:
        if(UtilInmuebles.eliminarInmueble(objInm)){
            JOptionPane.showMessageDialog(buttonBaja, "Inmueble dado de baja.", "Mensaje", JOptionPane.INFORMATION_MESSAGE);
            //borrar los datos
            //vistaInm.borrar();
        }else{
            JOptionPane.showMessageDialog(buttonGuardar, "Error al dar de baja el inmueble.", "Mensaje", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_buttonBajaActionPerformed

    private void buttonReservasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonReservasActionPerformed
        // TODO add your handling code here:
        ListadoReservas lr = new ListadoReservas(principal, true, objInm);
    }//GEN-LAST:event_buttonReservasActionPerformed

    private void buttonReservarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonReservarActionPerformed
        // TODO add your handling code here:
        Date fechaReserva = new Date();
        long difMillies = Math.abs(fechaEntrada.getTime() - fechaSalida.getTime());
        int noches = (int) Math.ceil(difMillies / (1000.0 * 60 * 60 * 24));
        double importe = objInm.getPrecioXnoche()*noches;
        
        //redondear el importe a 2 décimas máximo
        BigDecimal bd = new BigDecimal(importe).setScale(2, RoundingMode.HALF_UP);
        double importeRedondeado = bd.doubleValue();
        
        /**
        if(UtilUsuarios.esParticularVip(partic)){
            importe *= 0.9;
            bd = new BigDecimal(importeRedondeado).setScale(2, RoundingMode.HALF_UP);
            importeRedondeado = bd.doubleValue();
        }
        */
        
        String[] opciones = {"Aceptar cobro", "Cancelar Reserva"};
        
        int respuesta = JOptionPane.showOptionDialog(principal,
                "La reserva del inmueble conlleva el cobro de "+objInm.getPrecioXnoche()+" € por noche.\n"
                        + "Según las fechas seleccionadas en la búsqueda el total de noches de la reserva es de "+noches+"\n"
        +"por lo que el importe es de "+importeRedondeado+"€",
                "Confirmación del cobro",
                JOptionPane.YES_NO_OPTION,
                JOptionPane.QUESTION_MESSAGE,
                null,
                opciones,
                opciones[0]);
        
        if(respuesta==JOptionPane.YES_OPTION){ //aceptar reserva
            Reserva res = new Reserva(fechaReserva, importeRedondeado, objInm, partic, fechaEntrada, fechaSalida);
            try {
                UtilReservas.crearReserva(res);
                ListadoReservas lr = new ListadoReservas(principal, true, partic);
                lr.setVisible(true);
                
            } catch (IOException ex) {
                Logger.getLogger(ConsultarInmuebles.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(buttonGuardar, "Error al generar factura.", "Mensaje", JOptionPane.ERROR_MESSAGE);
            }
        }else{
            JOptionPane.showMessageDialog(buttonBaja, "Reserva cancelada.", "Mensaje", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_buttonReservarActionPerformed

    private void buttonComentariosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonComentariosActionPerformed
        // TODO add your handling code here:
        ConsultarComentarios cc = new ConsultarComentarios(principal, true, objInm);
    }//GEN-LAST:event_buttonComentariosActionPerformed

    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonAnterior;
    private javax.swing.JButton buttonBaja;
    private javax.swing.JButton buttonComentarios;
    private javax.swing.JButton buttonGuardar;
    private javax.swing.JButton buttonReservar;
    private javax.swing.JButton buttonReservas;
    private javax.swing.JButton buttonSiguiente;
    private javax.swing.JCheckBox cAire;
    private javax.swing.JCheckBox cAparcamiento;
    private javax.swing.JCheckBox cCocina;
    private javax.swing.JCheckBox cLavadora;
    private javax.swing.JCheckBox cPiscina;
    private javax.swing.JCheckBox cSecadora;
    private javax.swing.JCheckBox cTrabajo;
    private javax.swing.JCheckBox cWifi;
    private javax.swing.JTextField fieldBaños;
    private javax.swing.JTextField fieldCP;
    private javax.swing.JTextField fieldCalle;
    private javax.swing.JTextField fieldCama;
    private javax.swing.JTextField fieldCiudad;
    private javax.swing.JTextField fieldHabit;
    private javax.swing.JTextField fieldHuesped;
    private javax.swing.JTextField fieldNombre;
    private javax.swing.JTextField fieldNumero;
    private javax.swing.JFormattedTextField fieldPrecio;
    private javax.swing.JTextField fieldTipo;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JLabel labelCalificacion;
    private javax.swing.JLabel labelImagen;
    private javax.swing.JPanel panelEstrellas;
    private javax.swing.JPanel vistaInm;
    // End of variables declaration//GEN-END:variables

    /**
     *borra los contenidos de los fields
     */
    public void borrar() {
        setFieldNumero("");
        setFieldNombre("");
        setFieldPrecio("");
        setFieldCama("");
        setFieldHuesped("");
        setFieldBaños("");
        setFieldHabit("");
        setFieldCalle("");
        setFieldCP("");
        setFieldCiudad("");
        setFieldTipo("");
        setLabelImagen("");
        
        setCWifi(false);
        setCCocina(false);
        setCAire(false);
        setCLavadora(false);
        setCSecadora(false);
        setCTrabajo(false);
        setCAparcamiento(false);
        setCPiscina(false);
    }
    
    /**
     *activa las cajas de texto del panel para su edición
     */
    public void activaFieldDatos() {
        fieldNombre.setEditable(true);
        fieldCiudad.setEditable(true);
        fieldCP.setEditable(true);
        fieldCalle.setEditable(true);
        fieldNumero.setEditable(true);
        fieldHuesped.setEditable(true);
        fieldCama.setEditable(true);
        fieldHabit.setEditable(true);
        fieldBaños.setEditable(true);
        fieldPrecio.setEditable(true);
        fieldTipo.setEditable(true);
        
        cWifi.setEnabled(true);
        cPiscina.setEnabled(true);
        cSecadora.setEnabled(true);
        cLavadora.setEnabled(true);
        cAparcamiento.setEnabled(true);
        cAire.setEnabled(true);
        cTrabajo.setEnabled(true);
        cCocina.setEnabled(true);
    }
    
    /**
     *desactiva las cajas de texto del panel para su edición
     */
    public void desactivaFieldDatos() {
        fieldNombre.setEditable(false);
        fieldCiudad.setEditable(false);
        fieldCP.setEditable(false);
        fieldCalle.setEditable(false);
        fieldNumero.setEditable(false);
        fieldHuesped.setEditable(false);
        fieldCama.setEditable(false);
        fieldHabit.setEditable(false);
        fieldBaños.setEditable(false);
        fieldPrecio.setEditable(false);
        fieldTipo.setEditable(false);
        
        cWifi.setEnabled(false);
        cPiscina.setEnabled(false);
        cSecadora.setEnabled(false);
        cLavadora.setEnabled(false);
        cAparcamiento.setEnabled(false);
        cAire.setEnabled(false);
        cTrabajo.setEnabled(false);
        cCocina.setEnabled(false);
    }
    
    //Getters & Setters

    /**
     *
     * @return calificación según las estrellas coloreadas
     */
    public int getEstrellasCalificacion(){
        int calif = 0;
        for (JLabel estrella : estrellas) {
            if (estrella.getText().equals("\u2605")) {
                //estrella llena
                calif++;
            }
        }
        return calif;
    }
    
    /**
     *colorea las estrellas del panelEstrellas dsegún la calificación media de un inmueble
     * @param c
     */
    public void setEstrellasCalificacion(int c) {
        for(int i = 0; i < estrellas.length; i++) {
            if(i < c) {
                estrellas[i].setText("\u2605"); // estrella llena
            } else {
                estrellas[i].setText("\u2606"); // estrella vacía
            }
        }
    }

    /**
     *
     * @return texto de la calificación
     */
    public String getLabelCalificacion(){
        return labelCalificacion.getText();
    }
    
    /**
     *
     * @param txt
     */
    public void setLabelCalificacion(String txt){
        labelCalificacion.setText(txt);
    }
    
    /**
     *
     * @return nombre
     */
    public String getFieldNombre() {
        return fieldNombre.getText();
    }

    /**
     *
     * @param txt
     */
    public void setFieldNombre(String txt) {
        fieldNombre.setText(txt);
    }
    
    /**
     *
     * @return numero
     */
    public String getFieldNumero() {
        return fieldNumero.getText();
    }

    /**
     *
     * @param txt
     */
    public void setFieldNumero(String txt) {
        fieldNumero.setText(txt);
    }

    /**
     *
     * @return
     */
    public String getFieldBaños() {
        return fieldBaños.getText();
    }

    /**
     *
     * @param txt
     */
    public void setFieldBaños(String txt) {
        fieldBaños.setText(txt);
    }

    /**
     *
     * @return
     */
    public String getFieldCP() {
        return fieldCP.getText();
    }

    /**
     *
     * @param txt
     */
    public void setFieldCP(String txt) {
        fieldCP.setText(txt);
    }

    /**
     *
     * @return
     */
    public String getFieldCalle() {
        return fieldCalle.getText();
    }

    /**
     *
     * @param txt
     */
    public void setFieldCalle(String txt) {
        fieldCalle.setText(txt);
    }

    /**
     *
     * @return
     */
    public String getFieldCama() {
        return fieldCama.getText();
    }

    public void setFieldCama(String txt) {
        fieldCama.setText(txt);
    }

    public String getFieldCiudad() {
        return fieldCiudad.getText();
    }

    public void setFieldCiudad(String txt) {
        fieldCiudad.setText(txt);
    }

    public String getFieldHabit() {
        return fieldHabit.getText();
    }

    public void setFieldHabit(String txt) {
        fieldHabit.setText(txt);
    }

    public String getFieldHuesped() {
        return fieldHuesped.getText();
    }

    public void setFieldHuesped(String txt) {
        fieldHuesped.setText(txt);
    }

    public String getFieldPrecio() {
        return fieldPrecio.getText();
    }

    public void setFieldPrecio(String txt) {
        fieldPrecio.setText(txt);
    }

    public String getFieldTipo() {
        return fieldTipo.getText();
    }

    public void setFieldTipo(String txt) {
        fieldTipo.setText(txt);
    }

    public String getLabelImagen() {
        return labelImagen.getText();
    }

    public void setLabelImagen(String rutaImagen) {
        ImageIcon imagen = new ImageIcon(rutaImagen);
        //Se redimensiona
        ImageIcon imgRedimensionada = new ImageIcon(imagen.getImage().getScaledInstance(labelImagen.getWidth(), labelImagen.getHeight(), 1));
        labelImagen.setIcon(imgRedimensionada);
    }
    
    public boolean getCWifi(){
        return cWifi.isSelected();
    }
    
    public void setCWifi(boolean b){
        cWifi.setSelected(b);
    }
    
    public boolean getCCocina(){
        return cCocina.isSelected();
    }
    
    public void setCCocina(boolean b){
        cCocina.setSelected(b);
    }
    
    public boolean getCTrabajo(){
        return cTrabajo.isSelected();
    }
    
    public void setCTrabajo(boolean b){
        cTrabajo.setSelected(b);
    }
    
    public boolean getCPiscina(){
        return cPiscina.isSelected();
    }
    
    public void setCPiscina(boolean b){
        cPiscina.setSelected(b);
    }
    
    public boolean getCLavadora(){
        return cLavadora.isSelected();
    }
    
    public void setCLavadora(boolean b){
        cLavadora.setSelected(b);
    }
    
    public boolean getCSecadora(){
        return cSecadora.isSelected();
    }
    
    public void setCSecadora(boolean b){
        cSecadora.setSelected(b);
    }
    
    public boolean getCAparcamiento(){
        return cAparcamiento.isSelected();
    }
    
    public void setCAparcamiento(boolean b){
        cAparcamiento.setSelected(b);
    }
    
    public boolean getCAire(){
        return cAire.isSelected();
    }
    
    public void setCAire(boolean b){
        cAire.setSelected(b);
    }
    
    
}

